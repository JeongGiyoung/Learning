##### 제목 : 전처리 - dplyr library 사용법 #####

##### 설치되는 패키지

install.packages("dplyr") 

##### 시작 전 장착해야 되는 library

library(dplyr)
library(readxl) : 엑셀을 불러오는 라이브러리
library(ggplot2)

#### 1. 
setwd("C:/Recture/Busan_202202_R/Data")

exam <- read.csv("./csv_exam.csv")

#####
# head() : 처음 6행 출력
# tail() : 마지막 6행 출력
# View() : 엑셀처럼 보여주는 기능
# dim() : 행과 열 확인하기
# str() : 각 칼럼의 Type, 값들의 일부 출력
# summary() : 숫자로 된 데이터들의 최대, 최소, 중간, 평균, quarter 값 출력
# as.data.frame(ggplot2::mpg) : ggplot2 의 mpg 데이터를 데이터 프레임 형태로 불러오기
# 복사본 만드는 방법 
  * df_new <- df_raw
# rename() : 컬럼 이름 바꾸기
# 파생변수(새로운 컬럼 만들기)
# mpg데이터 셋을 가지고 실습. 통합연비 구하기
# hist() : 요약 통계량 plot 출력
# ifelse() : if 문
  * mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
# table() : 빈도표
# qplot() : 빈도 그래프
# ifelse() : 범주를 만들 때 유용하다
# 실습[1] 1.~5.
#############
# %>% filter() : 원하는 데이터 추출
  * exam %>% filter(class == 1 | class == 3 | class == 5)
# %in% 명령문을 사용해서 여러 조건을 한 번에 처리하기
  * exam %>% filter(class %in% c(1,3,5))
# 논리 연산자의 기준은 왼쪽이다
# 산술연산자
  * ^, ** : 제곱
  * %/% : 나눗셈의 몫
  * %% : 나눗셈의 나머지
# 실습[2]
#############
# %>% select() : 특정 컬럼 추출
  * exam %>% select(math, english)
# %>% select(-) : 특정 컬럼 제외하고 추출
# dplyr 함수 조합하기
# head 를 쓰고 싶을 때
  * exam %>% select(id, math) %>% head(10)
# 실습[3]
############
# %>% arrange() : 오름차순 정렬
# %>% arrange(desc()) : 내림차순 정렬
  * exam %>% arrange(desc(math)) %>% head
# %>% arrange( , ) : 복수로 오름차순 정렬
# 실습[4]
############
# %>% mutate( = + ) : 파생 변수 추가
###
exam %>% 
  mutate(total = math + english + science,
         mean = (math + english + science)/3) %>%
  head
###
# %>% mutate(  = ifelse( , " ", " ")) : 파생변수를 만들 때 ifelse 쓰기
# 실습[5]
############
# %>% summarise() : 요약
# %>% group_by(): 값을 그룹핑
# group_by() %>% summarise( , , ) : 그룹별 요약을 여러개 하기
###
exam %>%
  group_by(class) %>%
  summarise(mean_math = mean(math),
            sum_math = sum(math),
            median_math = median(math),
            n= n())
###
# n() : 데이터 수
# median() : 중앙값
# 두 개의 조건이 같은 값끼리 그룹핑
# 실습[6]
# mutate() 함수는 가상 메모리에 저장된 데이터이기 때문에, 실존 데이터를 가지고 계산하는 summarise() 함수의 경우 산술연산을 사용하면 처리하지 못한다. 그래서 summarasie()에 쓸 수 있는 다른 함수를 사용해야 가상 메모리에 저장된 데이터도 연산할 수 있다.
############
# 실습[7]
# 조건으로 먼저 필요한 데이터만 걸러내고(filter) 그룹핑을 해야 한다. 
  * 왜냐하면 먼저 데이터를 걸러내면
    - 이후 연산과정에서 속도가 빨라진다.
############
# left_join(, , , by = " ") : 기준을 두고 합치기
# typeof() : 일반 변수 type을 확인
# mode() : 데이터 컬럼의 tpye을 확인
# bind_rows(,) : 세로로 합치기
# 실습[8]
########################
# is.na() : 결측치 확인
# 결측치가 포함된 상태에서는 함수 분석이 불가능하다
# %>% filter(is.na()) : 결측치를 뽑기
# %>% filter(! s.na()) : 결측치 제거
# na.omit() : 컬럼값 중에 결측치가 있으면 행 전체를 삭제
# 무분별하게 데이터가 사라지면 분석에 영향을 미칠 수 있으니 
# 주로 컬럼별로 결측치를 삭제한다.
# na.rm = T : 결측치를 제외하고 함수 사용
# NA값은 주로 평균값으로 대체하기 때문에 na.rm를 자주 사용한다. 
# 실습[9]
##################
# 이상치(outlier) 확인하기
# 결측치로 대체하기
# 결측치를 제외하고 분석
# boxplot() :극단치 수치 확인
# 결측 처리하기
# 실습[10]